# experiments.py

import time
import matplotlib.pyplot as plt
from copy import deepcopy
from io_utils import input_random_custom, input_random
from algorithms import greedy_assignment, local_search_advanced, fairness_metrics

def experiment_t_max():
    print("\n--- –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ ---")
    t_max_values = [float(x) for x in input("–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ T_max (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª): ").split()]
    K = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ T_max: "))
    n = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: "))
    m = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É—Ä'—î—Ä—ñ–≤: "))
    W = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –¥–ª—è –∫—É—Ä'—î—Ä–∞: "))

    avg_times = []
    avg_order_diffs = []
    avg_reward_diffs = []
    for t_max in t_max_values:
        total_time = 0
        total_order_diff = 0
        total_reward_diff = 0
        for _ in range(K):
            orders = input_random(n, m, W).orders
            greedy = greedy_assignment(orders, m, W)
            start = time.time()
            improved = local_search_advanced(deepcopy(greedy), m, W, t_max)
            duration = time.time() - start
            metrics = fairness_metrics(improved)
            total_time += duration
            total_order_diff += metrics['order_diff']
            total_reward_diff += metrics['reward_diff']
        avg_times.append(total_time / K)
        avg_order_diffs.append(total_order_diff / K)
        avg_reward_diffs.append(total_reward_diff / K)
    plt.figure()
    plt.plot(t_max_values, avg_times, marker='o')
    plt.xlabel("T_max (—Å–µ–∫)")
    plt.ylabel("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)")
    plt.title("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥ T_max")
    plt.grid()
    plt.show()
    plt.figure()
    plt.plot(t_max_values, avg_order_diffs, marker='o', label="–†—ñ–∑–Ω–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å")
    plt.plot(t_max_values, avg_reward_diffs, marker='x', label="–†—ñ–∑–Ω–∏—Ü—è –ø—Ä–µ–º—ñ–π")
    plt.xlabel("T_max (—Å–µ–∫)")
    plt.ylabel("–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è")
    plt.title("–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥ T_max")
    plt.legend()
    plt.grid()
    plt.show()

def experiment_size():
    print("\n--- –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: –≤–ø–ª–∏–≤ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ ---")
    count = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: "))
    sizes = []
    for _ in range(count):
        n = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: "))
        m = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É—Ä'—î—Ä—ñ–≤: "))
        sizes.append((n, m))

    W = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –¥–ª—è –∫—É—Ä'—î—Ä–∞: "))
    K = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ü–ó (–ø–æ–≤—Ç–æ—Ä—ñ–≤) –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: "))

    # ‚¨áÔ∏è  –Ω–æ–≤—ñ –º–∞—Å–∏–≤–∏ –¥–ª—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    greedy_times, local_times = [], []

    greedy_order_diffs, local_order_diffs = [], []
    greedy_reward_diffs, local_reward_diffs = [], []

    for n, m in sizes:
        g_order_diff = l_order_diff = 0
        g_reward_diff = l_reward_diff = 0
        g_time = l_time = 0

        for _ in range(K):
            orders = input_random(n, m, W).orders

            # -- –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            start = time.time()
            greedy = greedy_assignment(orders, m, W)
            g_time += time.time() - start

            # -- –õ–æ–∫–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫
            start = time.time()
            improved = local_search_advanced(deepcopy(greedy), m, W)
            l_time += time.time() - start

            g_metrics = fairness_metrics(greedy)
            l_metrics = fairness_metrics(improved)

            g_order_diff += g_metrics['order_diff']
            l_order_diff += l_metrics['order_diff']
            g_reward_diff += g_metrics['reward_diff']
            l_reward_diff += l_metrics['reward_diff']

        # —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ K –ø–æ–≤—Ç–æ—Ä—ñ–≤
        greedy_order_diffs.append(g_order_diff / K)
        local_order_diffs.append(l_order_diff / K)
        greedy_reward_diffs.append(g_reward_diff / K)
        local_reward_diffs.append(l_reward_diff / K)
        greedy_times.append(g_time / K)
        local_times.append(l_time / K)


    labels = [f"{n}/{m}" for n, m in sizes]

    # --- üìà  –≥—Ä–∞—Ñ—ñ–∫–∏ (—Ä—ñ–∑–Ω–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å / –ø—Ä–µ–º—ñ–π) ---
    plt.figure()
    plt.plot(labels, greedy_order_diffs, marker='o', label="–ñ–∞–¥—ñ–±–Ω–∏–π: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    plt.plot(labels, local_order_diffs, marker='x', label="–õ–æ–∫–∞–ª—å–Ω–∏–π: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    plt.title("–°–µ—Ä–µ–¥–Ω—è —Ä—ñ–∑–Ω–∏—Ü—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å")
    plt.grid(); plt.legend(); plt.show()

    plt.figure()
    plt.plot(labels, greedy_reward_diffs, marker='o', label="–ñ–∞–¥—ñ–±–Ω–∏–π: –ø—Ä–µ–º—ñ—è")
    plt.plot(labels, local_reward_diffs, marker='x', label="–õ–æ–∫–∞–ª—å–Ω–∏–π: –ø—Ä–µ–º—ñ—è")
    plt.title("–°–µ—Ä–µ–¥–Ω—è —Ä—ñ–∑–Ω–∏—Ü—è –ø—Ä–µ–º—ñ–π")
    plt.grid(); plt.legend(); plt.show()

    # --- üÜï  –ì—Ä–∞—Ñ—ñ–∫ —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ---
    plt.figure()
    plt.plot(labels, greedy_times, marker='o', label="–ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
    plt.plot(labels, local_times, marker='x', label="–õ–æ–∫–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫")
    plt.title("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ")
    plt.ylabel("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å, —Å")
    plt.xlabel("n / m  (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è / –∫—É—Ä'—î—Ä–∏)")
    plt.grid(); plt.legend(); plt.show()
